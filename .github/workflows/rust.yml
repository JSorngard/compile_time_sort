name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Check formatting
      run: cargo fmt --check

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Check
      run: cargo check

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Run clippy
      run: cargo clippy -- -D warnings
      
  test:
    strategy:
      matrix:
        toolchain: [stable, beta]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Test
      run: cargo test
      
  doc:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: --cfg docsrs
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Generate documentation
      run: cargo +nightly doc --no-deps


  verify_rust_version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-msrv
    - name: Verify MSRV
      run: cargo msrv verify

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Cache
        uses: Swatinem/rust-cache@v2.8.0
      - uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Generate coverage reports
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true

  check_semver:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache
        uses: Swatinem/rust-cache@v2.8.0
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks
      - name: Check semver compatibility
        run: cargo semver-checks

  minimal:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: dtolnay/rust-toolchain@nightly
      - name: Set stable Rust as the default
        run: rustup default stable
      - name: Use minimal versions of dependencies
        run: cargo +nightly update -Zminimal-versions
      - name: Test
        run: cargo test

  no_std:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [thumbv7m-none-eabi, aarch64-unknown-none]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Check
      run: cargo check --target ${{ matrix.target }}
    - name: Build
      run: cargo build --target ${{ matrix.target }}
